import os
from dotenv import load_dotenv
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.output_parsers import StructuredOutputParser, ResponseSchema
load_dotenv()

openai_api_key = os.getenv("OPENAI_API_KEY")

# Output Parsers Method 1: Prompt Instructions & String Parsing
# A helpful way to format the output of a model. 
# Usually used for structured output. 
# https://python.langchain.com/docs/modules/model_io/output_parsers

# Two big concepts:

# 1. Format Instructions - A autogenerated prompt that tells the LLM how to format it's response based off your desired result

# 2. Parser - A method which will extract your model's text output into a desired structure (usually json)

llm = OpenAI(model_name="text-davinci-003", openai_api_key=openai_api_key)

# How you would like your response structured. This is basically a fancy prompt template
response_schemas = [
    ResponseSchema(name="bad_string", description="This a poorly formatted user input string"),
    ResponseSchema(name="good_string", description="This is your response, a reformatted response")
]

# How you would like to parse your output
output_parser = StructuredOutputParser.from_response_schemas(response_schemas)

# See the prompt template you created for formatting
format_instructions = output_parser.get_format_instructions()
print (format_instructions)
# The output should be a markdown code snippet formatted in the following schema, including the leading and trailing "```json" and "```":

# ```json
# {
# 	"bad_string": string  // This a poorly formatted user input string
# 	"good_string": string  // This is your response, a reformatted response
# }
# ```

template = """
You will be given a poorly formatted string from a user.
Reformat it and make sure all the words are spelled correctly

{format_instructions}

% USER INPUT:
{user_input}

YOUR RESPONSE:
"""

prompt = PromptTemplate(
    input_variables=["user_input"],
    partial_variables={"format_instructions": format_instructions},
    template=template
)

promptValue = prompt.format(user_input="welcom to califonya!")

print(promptValue)

llm_output = llm(promptValue)
print(llm_output)
# '```json\n{\n\t"bad_string": "welcom to califonya!", \n\t"good_string": "Welcome to California!"\n}\n```'
output_parser.parse(llm_output)
# {'bad_string': 'welcom to califonya!', 'good_string': 'Welcome to California!'}
